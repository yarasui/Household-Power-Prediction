# -*- coding: utf-8 -*-
"""Lab2_DataScienceProject_YARA (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dfesr52GEBfyw2hk8-JYoZZ1VjXAjP5k

# STEP 0: IMPORT LIBRARIES
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
from google.colab import drive
drive.mount('/content/drive')
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
from math import radians, cos, sin, asin, sqrt
import datetime
from sklearn.linear_model import LinearRegression
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
sns.set(style="ticks")
# %matplotlib inline
from statsmodels.tsa.seasonal import seasonal_decompose

"""# STEP 1: LOAD DATA"""

df= pd.read_csv('/content/drive/MyDrive/ECE 333/household_power_consumption.txt',sep=';',na_values="?")
df.head()

"""# STEP 2: BASIC DATA PROCESSING"""

display(df.shape)
display(df.dtypes)
display(df.describe)
display(df.info)

"""STEP 2.5: discuss what each input in your data means
# STEP 3: DATA TYPE CONVERSION
"""

# Time series (excute only once)
# df['DateTime']=pd.to_datetime(df['Date']+' '+df['Time'])
# df=df.drop(['Date','Time'],axis=1)
# when you work with dated data, you need to set the date as an index

# df=df.set_index('DateTime')
df.head()

"""we have to treat missing  values in order to convert from 'object' to 'float64'
# STEP 4: CHECK FOR NULL VALUES

"""

df.isnull().sum()

df.dropna(inplace=True)
df.isnull().sum()

df.dtypes
# now all my input types are float64

"""# STEP 5: EXPLORATORY DATA ANALYSIS (EDA)
visualization of data (start taking decisions)
"""

import matplotlib.pyplot as plt

# Visualize some of the time series data
plt.figure(figsize=(15, 10))

plt.subplot(3, 1, 1)
plt.plot(df['Global_active_power'])
plt.title('Global Active Power')
plt.ylabel('Power (kW)')

plt.subplot(3, 1, 2)
plt.plot(df['Global_reactive_power'])
plt.title('Global Reactive Power')
plt.ylabel('Power (kW)')

plt.subplot(3, 1, 3)
plt.plot(df['Voltage'])
plt.title('Voltage')
plt.ylabel('Voltage (V)')

plt.tight_layout()
plt.show()

"""# STEP 6: ADVANCED PRE-PROCESSING: FEATURE ENGINEERING
after the visualization, which explains trends in data, we do feature engineering

defining a feature visualizarion function
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.seasonal import seasonal_decompose
import holidays

def visualize_features(df):
    """
    Generate feature visualizations for household power consumption.
    Assumes df has datetime index and column 'Global_active_power'.
    """

    # ========== TIME FEATURES ==========
    df['hour'] = df.index.hour
    df['day_of_week'] = df.index.dayofweek
    df['month'] = df.index.month

    # ========== 1. HEATMAP ==========
    heatmap_data = df.pivot_table(values='Global_active_power',
                                  index='day_of_week',
                                  columns='hour',
                                  aggfunc='mean')
    plt.figure(figsize=(12,6))
    sns.heatmap(heatmap_data, cmap="YlGnBu")
    plt.title("Average Global Active Power (Hour vs Day of Week)")
    plt.ylabel("Day of Week (0=Mon)")
    plt.xlabel("Hour of Day")
    plt.show()

    # ========== 2. SEASONAL DECOMPOSITION ==========
    series = df['Global_active_power'].resample('H').mean()
    result = seasonal_decompose(series.dropna(), model='additive', period=24)
    result.plot()
    plt.show()
     # ========== 3. WEEKEND & HOLIDAY EFFECT ==========
    df['is_weekend'] = df.index.dayofweek >= 5

    fr_holidays = holidays.France()   # change country if needed
    df['is_holiday'] = [d in fr_holidays for d in df.index.date]

    plt.figure(figsize=(8,6))
    sns.boxplot(x='is_weekend', y='Global_active_power', data=df)
    plt.title("Weekend Effect on Power Consumption")
    plt.show()

    plt.figure(figsize=(8,6))
    sns.boxplot(x='is_holiday', y='Global_active_power', data=df)
    plt.title("Holiday Effect on Power Consumption")
    plt.show()




    # ========== 4. BOXPLOTS BY HOUR & MONTH ==========
    plt.figure(figsize=(12,6))
    sns.boxplot(x='hour', y='Global_active_power', data=df)
    plt.title("Distribution of Power by Hour of Day")
    plt.show()

    plt.figure(figsize=(12,6))
    sns.boxplot(x='month', y='Global_active_power', data=df)
    plt.title("Distribution of Power by Month")
    plt.show()

    # ========== 5. ROLLING WINDOW STATISTICS ==========
    df['rolling_mean'] = df['Global_active_power'].rolling(window=24).mean()
    df['rolling_std']  = df['Global_active_power'].rolling(window=24).std()

    plt.figure(figsize=(15,6))
    df['Global_active_power'].plot(alpha=0.5, label="Raw")
    df['rolling_mean'].plot(label="24h Rolling Mean")
    df['rolling_std'].plot(label="24h Rolling Std", linestyle="--")
    plt.title("Global Active Power with 24h Rolling Statistics")
    plt.legend()
    plt.show()

# Convert Date + Time into a datetime index
df['DateTime'] = pd.to_datetime(df['Date'] + ' ' + df['Time'],
                                format='%d/%m/%Y %H:%M:%S')

df = df.drop(['Date','Time'], axis=1)
df = df.set_index('DateTime')
visualize_features(df)

"""breif description on what each graph tells us
1. heatmap (hour vs day of week)

it shows us average consumption patterns by time of day across different weekdays, it reveals daily routines, like higher usage evenings, and weekly cycles (weekends vs weekdays)

2. seasonal decomposition

it splits the power signal into trend, seasonality, and residual (noise)
it lets us see long-term trends, like gradual increase, repeated daily cycles (seasonality), and random fluctuations

3. holiday boxplots

it shows a distribution of power usage on weekends vs weekdays, and holidays vs regular days. it captures behavioral effects, like people stay home more on weekends/holidays, often raising/lowering consumption patternsS

4. boxplots across hours & months

it shows:
by hour: variability of consumption during the day (morning peaks, night lows)
by month: seasonal variations (winter heating vs summer cooling).
it helps us model time-of-day and seasonal dependence

5. rolling window statistics

it shows moving averages and standard deviations of power consumption like in a 24-hour window
it highlights short term trends and volatility, smoothing out noise to see consumption shifts more clearly
"""

